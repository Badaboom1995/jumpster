import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// Initialize Supabase client
const supabase = createClient(
  "https://adrdxahjylqbmxomhrmi.supabase.co",
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFkcmR4YWhqeWxxYm14b21ocm1pIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mjc2Njc1NDAsImV4cCI6MjA0MzI0MzU0MH0.pe1KulD4qwauzZxD0PFIV0cfdnuVii12tdgUHsQsRiA",
);

// with formatting
const welcomeMessage = `
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Jumpster! üéâüéâüéâ</b>

Jumpster ‚Äî —ç—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ñ–∏—Ç–Ω–µ—Å–æ–º. –ú—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–æ–≤—ã–µ –ò–ò —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—á–∏—Ç–∞—é—Ç –≤–∞—à–∏ –ø—Ä—ã–∂–∫–∏.

üí™ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã Jump:</b> –ö–∞–∂–¥—ã–π –≤–∞—à –ø—Ä—ã–∂–æ–∫ –ø—Ä–∏–Ω–æ—Å–∏—Ç –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥ÔøΩÔøΩ—è –æ—Ç–∫—Ä—ã—Ç–∏—è —É–ª—É—á—à–µ–Ω–∏–π, –Ω–∞–≥—Ä–∞–¥ –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ.
üîÑ <b>–ü—Ä–æ–π–¥–∏—Ç–µ –ø—É—Ç—å –æ—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ —á–µ–º–ø–∏–æ–Ω–∞:</b> –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞—Ç–ª–µ—Ç–∞, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–π—Ç–µ –º–µ–¥–∏–∞. 
üåé <b>–û–±—â–∞–π—Ç–µ—Å—å –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å:</b> –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–µ—Ç—å –¥—Ä—É–∑–µ–π –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö. –î–µ–ª–∏—Ç–µ—Å—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞.

–° Jumpster —Ñ–∏—Ç–Ω–µ—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ–º-—Ç–æ –±–æ–ª—å—à–∏–º. –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ —É–∑–Ω–∞–π—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–∞–ª–µ–∫–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏! ‚ö°

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä—ã–≥–∞—Ç—å —Å Jumpster! üåü`;

export async function POST(request: Request) {
  try {
    const telegramApiUrl = `https://api.telegram.org/bot7726261005:AAE-eY0TDvYtHF335htj9n_hq44x6igZ-ms/sendMessage`;
    const requestData = await request.json();

    if (requestData.message?.text?.startsWith("/start")) {
      // Send welcome message with inline keyboard
      await fetch(telegramApiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          parse_mode: "HTML",
          chat_id: requestData.message.from.id,
          text: welcomeMessage,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                  web_app: { url: "https://jumpster.vercel.app/" },
                },
              ],
            ],
          },
        }),
      });

      const referrerId = requestData.message.text.split(" ")[1]; // Get the parameter after /start
      const refferrerNumberId = referrerId ? parseInt(referrerId) : null;
      const userTelegramId = requestData.message.from.id;

      // check if user exists
      const { data: user } = await supabase
        .from("users")
        .select("*")
        .eq("telegram_id", userTelegramId)
        .single();
      // get referrer

      const { data: referrer } = await supabase
        .from("users")
        .select("*")
        .eq("id", refferrerNumberId)
        .single();

      if (user && referrerId) {
        return NextResponse.json(
          { error: "–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" },
          { status: 400 },
        );
      } else {
        // create user
        const { data: newUser, error: userError } = await supabase
          .from("users")
          .insert({
            telegram_id: userTelegramId,
            username: requestData.message.from.username,
          })
          .select()
          .single();

        if (referrerId) {
          // create referral
          await supabase.from("referrals").insert({
            referrer_id: refferrerNumberId,
            referred_user_id: newUser.id,
          });
          // send message to referrer
          await fetch(telegramApiUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              chat_id: referrer.telegram_id,
              text: `‚≠êÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUser.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ Jumpster –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ`,
            }),
          });
          // send message to referred user
          await fetch(telegramApiUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              chat_id: userTelegramId,
              text: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω",
            }),
          });
        }
      }
    }
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Error processing Telegram webhook:", error);
    return NextResponse.json(
      { error: "Failed to process webhook" },
      { status: 500 },
    );
  }
}
